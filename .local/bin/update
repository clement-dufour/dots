#!/usr/bin/env bash

# https://github.com/travier/dotfiles/blob/16a0b3e6942b679f076ad55a1f1b70525333941d/update

set -euo pipefail
set -E

error() {
    printf "Error: \"%s\" exited with status %d.\n" "${BASH_COMMAND}" $?
}
trap error ERR

usage() {
    printf "Usage: %s [-h] [-aste] [-r]\n\n" "${0##*/}"
}

action_update_system=false
action_update_toolboxes=false
action_update_emacs=false
action_reboot=false
action_poweroff=false

while getopts ":hasterp" option; do
    case ${option} in
        h)
            usage
            exit 0
            ;;
        a)
            action_update_system=true
            action_update_toolboxes=true
            action_update_emacs=true
            ;;
        s)
            action_update_system=true
            ;;
        t)
            action_update_toolboxes=true
            ;;
        e)
            action_update_emacs=true
            ;;
        r)
            action_reboot=true
            ;;
        p)
            action_poweroff=true
            ;;
        \?)
            usage
            printf "Error: %s is not a valid option.\n" "${OPTARG}"
            exit 1
            ;;
        :)
            usage
            printf "Error: %s requires an argument.\n" "${OPTARG}"
            exit 1
            ;;
    esac
done

if $action_reboot && $action_poweroff; then
    usage
    printf "Options -r and -p are mutually exclusive, use only one.\n"
    exit 1
fi

if ! $action_update_system &&
        ! $action_update_toolboxes &&
        ! $action_update_emacs; then
    usage
    printf "Specify at least one action.\n"
    exit 1
fi

# update_firmwares() {
#     printf '[  ] Updating firmwares...\n'
#     sudo fwupdmgr refresh
#     sudo fwupdmgr update
#     printf '[OK] Updated firmwares\n'
# }

update_system() {
    rpm-ostree upgrade
}

update_toolboxes() {
    local container
    local image
    local container_name
    local container_image_digest
    local pulled_image_digest
    podman container list --all --filter "label=com.github.containers.toolbox" \
        --format "{{.ID}}" | while read -r container; do
            if podman inspect --format json "${container}" |
                    jq -e '.[].ExecIDs == []' >/dev/null; then
                image="$(podman inspect --format "{{.ImageName}}" "${container}")"
                container_name="$(podman inspect --format "{{.Name}}" "${container}")"
                container_image_digest="$(podman inspect --format "{{.Digest}}" "${image}")"
                if [[ "${image}" != "localhost"* ]] &&
                       podman pull "${image}" >/dev/null; then
                    pulled_image_digest="$(podman inspect --format "{{.Digest}}" "${image}")"
                    if ! [ "${container_image_digest}" = "${pulled_image_digest}" ]; then
                        podman stop "${container}" >/dev/null
                        podman rm "${container}" >/dev/null
                        toolbox create --image "${image}" "${container_name}"
                    fi
                fi
            fi
    done
    podman images --filter "dangling=true" --format "{{.ID}}" |
        while read -r image; do
            podman rmi "${image}"
    done
}

update_emacs() {
    toolbox run --container emacs-toolbox "${XDG_CONFIG_HOME:-${HOME}/.config}"/emacs/bin/doom upgrade --force
}

if $action_update_system; then
    update_system
fi
if $action_update_toolboxes; then
    update_toolboxes
fi
if $action_update_emacs; then
    update_emacs
fi
if $action_reboot; then
    systemctl reboot
fi
if $action_poweroff; then
    systemctl poweroff
fi
